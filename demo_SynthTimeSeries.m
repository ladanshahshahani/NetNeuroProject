clear;
close all;clc
%% setting parameters

rng default
TR      = 2;       % time of repetition in seconds
N       = 236;     % number of time points (frames)
dt      = 1;       
shft    = 1;       % amount of introduced shift
subshft = 0.5;     % amount of fractional shift introduced 

%% Sanity check: extracting delays from synthetic time series 

s1 = randn(N, 1);     %% randomly generated reference time serie. Other time series are generated by shifting this one

%%%% applying full shift on randomly generated time serie
s2          = circshift(s1, [shft, 0]);
s3          = circshift(s2, [shft, 0]);
s4          = circshift(s3, [shft, 0]);
s5          = circshift(s4, [shft, 0]);
s6          = circshift(s5, [shft, 0]);
sFullDelay  = [s1, s2, s3, s4, s5, s6];

%%%% applying fractional shift using fourier transform
fAxis      = ifftshift((0:N-1) -ceil((N-1)/2))/N/dt;
s7         = ifft(fft(s1').*exp(-1i*2*pi*subshft*fAxis));
s7         = real(s7);
sFracDelay = [s1, s7'];

%%%% visualizeing time series
%%% figure 1: plotting reference time series and its fractionally delayed 
figure(1);
plot(s1, 'r')
hold on
plot(s7, 'b')
title('time series: reference and fractionally delayed')
xlabel('time');
ylabel('intensity')

%%% figure 2: plotting reference time series and 7 fully delayed versions
figure(2);
plot(sFullDelay)
title('time series: reference and fully delayed')
xlabel('time');
ylabel('intensity');

%%%% estimating delay and constructing time delay matrix
[TDfull, PCfull, lagProjectionFull, TDzFull] = td_mat(sFullDelay,8, TR);
display(TDfull);
[TDfrac, PCfrac, lagProjectionFrac, TDzFrac] = td_mat(sFracDelay,8, TR);
display(TDfrac);